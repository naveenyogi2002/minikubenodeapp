name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies  
        run: npm install
      
      - name: Run tests
        run: npm test
      
      - name: Build Docker image
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker build -t naveenyogi/nodeapp:latest .
          docker login -u naveenyogi -p $DOCKER_PASSWORD  
          docker push naveenyogi/nodeapp:latest
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Get kubeconfig
      run: |
        mkdir $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f deployment.yaml
            
  # deploy:
  #   runs-on: ubuntu-latest
    
  #   needs: build
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
      
  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v1

  #     - name: Deploy to Minikube
  #       run: |
  #         # Check if Minikube is running
  #         if minikube status | grep -q "host: Running"; then
  #           echo "Minikube is running, deploying to it..."
  #         else
  #           echo "Minikube is not running, please start it manually."
  #           exit 1
  #         fi
      
  #         # Deploy to Minikube
  #         echo "Deploying to Minikube..."
  #         kubectl config use-context minikube
  #         kubectl apply -f deployment.yaml --validate=false
  #         if [ $? -eq 0 ]; then
  #           echo "Deployment succeeded."
  #         else
  #           echo "Deployment failed."
  #           exit 1
  #         fi
      
  #         kubectl apply -f service.yaml
  #         if [ $? -eq 0 ]; then
  #           echo "Service application succeeded."
  #         else
  #           echo "Service application failed."
  #           exit 1
  #         fi
      
  #         # Print the status of the deployment and service
  #         echo "Checking deployment and service status..."
  #         kubectl get deployments
  #         kubectl get services

  #     - name: Get Pod Logs
  #       run: |
  #         echo "Getting logs of deployed pods..."
  #         kubectl logs -l app=<your-app-label> --all-containers=true

  #     - name: Configure kubectl
  #       run: |
  #         kubectl config set-context minikube --cluster=minikube --user=minikube
  #         kubectl config use-context minikube
